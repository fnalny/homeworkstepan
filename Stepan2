
M_IN_KM = 1000


class InfoMessage:
    """Информационное сообщение о тренировке."""
    def __init__(self,
                 training_type: str,
                 duration: float,
                 distance: int,
                 speed: int,
                 calories: int):
        self.training_type = training_type
        self.duration = duration
        self.distance = distance
        self.speed = speed
        self.calories = calories


    def show_training_info(self):
        pass

    def get_message(self):
        return f'Тип тренировки: {self.training_type}; Длительность: {self.duration:.3f} ч.; ' \
               f'Дистанция: {self.distance:.3f} км; Ср. скорость: {self.speed:.3f} км/ч; ' \
               f'Потрачено ккал: {self.calories:.3f}.'


class Training:
    """Базовый класс тренировки."""
    LEN_STEP = float(0.65)
    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float) -> None:
        self.action = action // 1000
        self.duration = duration
        self.weight = weight

    def get_distance(self) -> float:
        """Получить дистанцию в км."""
        return self.action * self.LEN_STEP / M_IN_KM

    def get_mean_speed(self) -> float:
        """Получить среднюю скорость движения."""
        return self.get_distance() / self.duration

    def get_spent_calories(self) -> float:
        """Получить количество затраченных калорий."""
        pass

    def show_training_info(self) -> InfoMessage:
        """Вернуть информационное сообщение о выполненной тренировке."""
        return InfoMessage()


class Running(Training):
    """Тренировка: бег."""
    CALORIES_MEAN_SPEED_MULTIPLIER = 18
    CALORIES_MEAN_SPEED_SHIFT = 1.79
    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float) -> None:
        super().__init__(action, duration, weight)

    def get_spent_calories(self):
        return ((self.CALORIES_MEAN_SPEED_MULTIPLIER * super().get_mean_speed() +
                 self.CALORIES_MEAN_SPEED_SHIFT) * self.weight / M_IN_KM * self.duration)


class SportsWalking(Training):
    """Тренировка: спортивная ходьба."""
    WEIGHT_MULTIPLIER = float(0.035)
    HEIGHT_MULTIPLIER = float(0.029)

    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 height: int) -> None:
        self.height = height
        super().__init__(action, duration, weight)

    def get_spent_calories(self) -> float:
        return ((self.WEIGHT_MULTIPLIER * self.weight + (self.get_mean_speed()**2 /
                self.height) * self.HEIGHT_MULTIPLIER * self.weight) * self.duration)


class Swimming(Training):
    """Тренировка: плавание."""
    LEN_STEP = float(1.38)
    def __init__(self,
                 action: int,
                 duration: float,
                 weight: float,
                 lenght_pool: int,
                 count_pool: int) -> None:
        self.count_pool = count_pool
        self.lenght_pool = lenght_pool
        super().__init__(action, duration, weight)

    def get_spent_calories(self) -> float:
        return ((self.get_mean_speed() + 1.1) * 2 * self.weight * self.duration)

    def get_mean_speed(self) -> float:
        return (self.lenght_pool * self.count_pool / M_IN_KM / self.duration)

def read_package(workout_type: str, data: list) -> Training:
    """Прочитать данные полученные от датчиков."""
    pass

#дальше не разобрался пока что..
def main(training: Training) -> None:
    """Главная функция."""
    info = InfoMessage()


if __name__ == '__main__':
    packages = [
        ('SWM', [720, 1, 80, 25, 40]),
        ('RUN', [15000, 1, 75]),
        ('WLK', [9000, 1, 75, 180]),
    ]

    for workout_type, data in packages:
        training = read_package(workout_type, data)
        main(training)
